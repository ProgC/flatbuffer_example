// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MYDATA_PROGC_PLAYERDATA_H_
#define FLATBUFFERS_GENERATED_MYDATA_PROGC_PLAYERDATA_H_

#include "flatbuffers/flatbuffers.h"


namespace ProgC {
namespace PlayerData {

struct PlayerData;
struct Player;

MANUALLY_ALIGNED_STRUCT(4) PlayerData FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t age_;
  int32_t height_;
  float speed_;

 public:
  PlayerData(int32_t _age, int32_t _height, float _speed)
    : age_(flatbuffers::EndianScalar(_age)), height_(flatbuffers::EndianScalar(_height)), speed_(flatbuffers::EndianScalar(_speed)) { }

  int32_t age() const { return flatbuffers::EndianScalar(age_); }
  int32_t height() const { return flatbuffers::EndianScalar(height_); }
  float speed() const { return flatbuffers::EndianScalar(speed_); }
};
STRUCT_END(PlayerData, 12);

struct Player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_HP = 6
  };
  int32_t id() const { return GetField<int32_t>(VT_ID, 10); }
  float hp() const { return GetField<float>(VT_HP, 97.5); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<float>(verifier, VT_HP) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(Player::VT_ID, id, 10); }
  void add_hp(float hp) { fbb_.AddElement<float>(Player::VT_HP, hp, 97.5); }
  PlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PlayerBuilder &operator=(const PlayerBuilder &);
  flatbuffers::Offset<Player> Finish() {
    auto o = flatbuffers::Offset<Player>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Player> CreatePlayer(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 10,
   float hp = 97.5) {
  PlayerBuilder builder_(_fbb);
  builder_.add_hp(hp);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const ProgC::PlayerData::Player *GetPlayer(const void *buf) { return flatbuffers::GetRoot<ProgC::PlayerData::Player>(buf); }

inline bool VerifyPlayerBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<ProgC::PlayerData::Player>(); }

inline void FinishPlayerBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ProgC::PlayerData::Player> root) { fbb.Finish(root); }

}  // namespace PlayerData
}  // namespace ProgC

#endif  // FLATBUFFERS_GENERATED_MYDATA_PROGC_PLAYERDATA_H_
